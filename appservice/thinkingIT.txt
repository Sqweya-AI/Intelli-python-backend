Escalation Events:
1. user_request_to_speak_to_human   : user wants to speak to a human  
2. user_request_for_discount        : user asks for a discount 
3. user_request_to_book_flight      : user wants to book a flight 
4. user_request_about_flight_prices : user wants to know about flight prices 
5. user_request_file_format         : user has sent a file(image or audio, or video etc)
6. user_request_not_answer          : bot can answer user's question 

Actions:
-create an openAI assistant that can detect the escalation event
-send notification to:
    * business notified whatsapp number : next action : redirect to dashboard
    * business notified email           : next action : redirect to dashboard
    * business dashboard                : next action : go to conversation with immediat takeover 

    + notification format to send to dashboard: 
        {
            "customer_number" : "value",
            "event"           : "event",
            "created_at"      : "time"
        }

________________________________________________________________________________________________________________________________________________________

Sentiment Analysis:
*Emotions:
    1. disappointed 
    2. angry 
    3. neutral 
    4. happy 
    5. satisfied 


*objective : to get the sentiment of each chatsession for a window of 1hours

Actions:
-create an openAI assistant that performs sentiment analysis on a batch of message and return a response with a list of emotions for each conversation
-every 1h, take each chatsession's chathistory and run the analysis,
-an endpoint to GET the analysis results 

________________________________________________________________________________________________________________________________________________________


{
    "appservice"               : "appservice",
    "number_of_chatsession"    : "value",
    "number_of_message"        : "value",
    "growth_percentage"        : a list the monitoring objects 
    "escalated_conversation"   : "value",
    "issue_resolved"           : "value",
    "resolution_time"          : "value" 
}



a monitoring models: 
    - metric name 
    - transaction 
    - 

a transaction models: this is to store the number of a particular change of a metric 
    - transaction value 
    - time of the transaction 
    - current_growth : (the new value - the last value) / the new value 

________________________________________________________________________________________________________________________________________________________

1. connect as an individual 
2. display the businesses owned by the individual 
3. select a business
4. display the app services for that business 
5. select an app service 
6. display the conversation for that appservice
7. select a conversation 
8. display the messages on that conversation
9. takeover that conversation by sending 