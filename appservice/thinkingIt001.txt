
"""

1. takeover endpoint 
customer_number phone number of the customer 
phone_number is the business phone number  


2. takeover message endpoint 
customer_number phone number of the customer 
phone_number is the business phone number  
content is the customer message 
answer is the message of the business 


3. chatsession history 
phone_number is the business phone number  


{
  "object": "whatsapp_business_account",
  "entry": [
    {
      "id": "358127370715582",
      "changes": [
        {
          "value": {
            "messaging_product": "whatsapp",
            "metadata": {
              "display_phone_number": "15556221967",
              "phone_number_id": "381738275021314"
            },
            "contacts": [
              {
                "profile": {
                  "name": "Sila"
                },
                "wa_id": "254751578687"
              }
            ],
            "messages": [
              {
                "from": "254751578687",
                "id": "wamid.HBgMMjU0NzUxNTc4Njg3FQIAEhgWM0VCMDg0NzYzMTExNDUyQURDNjRGRQA=",
                "timestamp": "1720051785",
                "text": {
                  "body": "y"
                },
                "type": "text"
              }
            ]
          },
          "field": "messages"
        }
      ]
    }
  ]
}

"""

# Meta webhook Request Objects 
"""
1. 
{
  "object": "whatsapp_business_account",
  "entry": [
    {
      "id": "358127370715582",
      "changes": [
        {
          "value": {
            "messaging_product": "whatsapp",
            "metadata": {
              "display_phone_number": "15556221967",
              "phone_number_id": "381738275021314"
            },
            "contacts": [
              {
                "profile": {
                  "name": "Sila"
                },
                "wa_id": "254751578687"
              }
            ],
            "messages": [
              {
                "from": "254751578687",
                "id": "wamid.HBgMMjU0NzUxNTc4Njg3FQIAEhggMzk4NTk4QjNCQzMxM0Y0NEQ2RjdDMDNDMzE5RDg2OUQA",
                "timestamp": "1720179745",
                "text": {
                  "body": "Hello"
                },
                "type": "text"
              }
            ]
          },
          "field": "messages"
        }
      ]
    }
  ]
}



2. 
{
  "object": "whatsapp_business_account",
  "entry": [
    {
      "id": "358127370715582",
      "changes": [
        {
          "value": {
            "messaging_product": "whatsapp",
            "metadata": {
              "display_phone_number": "15556221967",
              "phone_number_id": "381738275021314"
            },
            "statuses": [
              {
                "id": "wamid.HBgMMjU0NzUxNTc4Njg3FQIAERgSNURGQjM3QTg1NEUxQUVFMEU0AA==",
                "status": "sent",
                "timestamp": "1720179748",
                "recipient_id": "254751578687",
                "conversation": {
                  "id": "0f007f9a9b0874573fb36e961ef0e8bc",
                  "expiration_timestamp": "1720265640",
                  "origin": {
                    "type": "service"
                  }
                },
                "pricing": {
                  "billable": true,
                  "pricing_model": "CBP",
                  "category": "service"
                }
              }
            ]
          },
          "field": "messages"
        }
      ]
    }
  ]
}

3. 

{
  "object": "whatsapp_business_account",
  "entry": [
    {
      "id": "358127370715582",
      "changes": [
        {
          "value": {
            "messaging_product": "whatsapp",
            "metadata": {
              "display_phone_number": "15556221967",
              "phone_number_id": "381738275021314"
            },
            "statuses": [
              {
                "id": "wamid.HBgMMjU0NzUxNTc4Njg3FQIAERgSNURGQjM3QTg1NEUxQUVFMEU0AA==",
                "status": "read",
                "timestamp": "1720179749",
                "recipient_id": "254751578687",
                "conversation": {
                  "id": "0f007f9a9b0874573fb36e961ef0e8bc",
                  "origin": {
                    "type": "service"
                  }
                },
                "pricing": {
                  "billable": true,
                  "pricing_model": "CBP",
                  "category": "service"
                }
              }
            ]
          },
          "field": "messages"
        }
      ]
    }
  ]
}


"""



# count = 0
# @api_view(['GET','POST'])
# @permission_classes([AllowAny,])
# @csrf_exempt
# def webhook(request):
#     if request.method == 'GET':
        
#         mode      = request.GET.get('hub.mode')
#         token     = request.GET.get('hub.verify_token')
#         challenge = request.GET.get('hub.challenge')

        
#         logging.info(f"Verification attempt - Mode: {mode}, Token: {token}, Challenge: {challenge}")
#         logging.info(f"Stored VERIFY_TOKEN: {VERIFY_TOKEN}")

#         if mode == 'subscribe' and token == VERIFY_TOKEN:
#             logging.info("Verification successful")
#             return HttpResponse(challenge, content_type="text/plain")
 
#         else:
#             logging.warning("Verification failed")
#             return JsonResponse({'error': 'Verification token mismatch'}, status=403)
    
#     elif request.method == 'POST':
#         global count
#         print(count)
#         count +=1 

#         print(request.data)
#         print(request.data.keys())
#         print(request.data.get('entry')[0]['changes'][0].keys())

#         # this is from whatsapp
#         if 'object' in request.data and 'entry' in request.data:
#             try:
#                 id              = request.data.get('entry')[0]['id']
#                 customer_number = request.data.get('entry')[0]['changes'][0]['value']['contacts'][0]['wa_id']
#                 customer_name   = request.data.get('entry')[0]['changes'][0]['value']['contacts'][0]['profile']['name']
#                 content         = request.data.get('entry')[0]['changes'][0]['value']['messages'][0]['text']['body']

#                 appservice = get_object_or_404(AppService, whatsapp_business_account_id=id)
#                 assistant_id = appservice.assistant_id
#                 print('phone_number',appservice.phone_number)
#                 print('phone_number_id',appservice.phone_number_id)
#                 chatsession, existed = ChatSession.objects.get_or_create(
#                     customer_number = customer_number,
#                     appservice      = appservice,     
#                 )

#                 if not existed:
#                     chatsession.customer_name = customer_name
#                     chatsession.save()

#                 # chat_history = get_chat_history(chatsession=chatsession)

#                 # ai or human logic
#                 if chatsession.is_handle_by_human == False and content is not None:
#                     # answer = get_answer_from_model(message=content, chat_history=chat_history)
#                     answer = bot_process(input_text=content, appservice=appservice, recipient_id=customer_number, assistant_id=assistant_id)

#                 if 'messages' in request.data.get('entry')[0]['changes'][0].keys():
#                     sendingData = {
#                         "recipient"       : customer_number,
#                         "text"            : answer if answer else 'Please wait for our response..',
#                         "phone_number_id" : appservice.phone_number_id,
#                         "access_token"    : appservice.access_token
#                     }
                    
#                     send_whatsapp_message(sendingData)
#                     message = Message.objects.create(
#                         content     = content,
#                         answer      = answer,
#                         chatsession = chatsession,
#                         sender      = 'ai'
#                     )

#                     message.save()

#                 # print(request.data)
#                 return JsonResponse({'result': answer}, status=201)
#             except Exception as e:
#                 status          = request.data.get('entry')[0]['changes'][0]['value']['statuses'][0]['status']
#                 print("status", status)
#                 return Response({
#                     'result' : "Status Well Received"
#                 }, status=200)



#         else:
#             try:
#                 customer_number = request.data.get('customer_number', None)
#                 customer_name   = request.data.get('customer_name', None)
#                 phone_number    = request.data.get('phone_number', None)
#                 content         = request.data.get('content', None)
#                 answer          = request.data.get('answer', None)


#             except Exception as e:
#                 print(e)
            
#             appservice = get_object_or_404(AppService, phone_number=phone_number)
#             chatsession, existed = ChatSession.objects.get_or_create(
#                 customer_number = customer_number,
#                 appservice = appservice,     
#             )

#             # chat_history = get_chat_history(chatsession=chatsession)

#             sendingData = {
#                 "recipient"       : customer_number,
#                 "text"            : answer,
#                 "phone_number_id" : appservice.phone_number_id,
#                 "access_token"    : appservice.access_token
#             }
#             send_whatsapp_message(sendingData)
#             message = Message.objects.create(
#                 content     = content,
#                 answer      = answer,
#                 chatsession = chatsession,
#                 sender      = 'human'
#             )

#             message.save()

#             # print(request.data)
#             return JsonResponse({'result': answer}, status=201)
